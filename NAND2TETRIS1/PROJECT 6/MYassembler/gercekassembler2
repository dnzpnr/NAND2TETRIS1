
(define counter -1)

(define (pass1 exp)
  (set! counter (+ 1 counter))
    (cond ((and (equal? (string-ref exp 0) '#\()
                (equal? (string-ref exp (- (string-length exp) 1)) '#\)))
           (l-command (substring exp 1 (- (string-length exp) 1)))
           (set! counter (- counter 1))
           (let ((exp "")) exp))
          (else exp)))

(define (l-command x)
  (add-list-l (string->symbol x)))

(define list1 ())
(define symbol-table ())

(define (add-list-l exp)
  (set! list1 (list exp counter))
  (set! symbol-table (cons list1 symbol-table))
  (set! list1 ()))




(require 2htdp/batch-io)

(write-file "deneme.asm" (foldr string-append "" (map (lambda (x) (string-append (pass1 x) "\n"))
                                                       (read-lines "/home/deniz/symboliccode.asm"))))




(define (assembler exp)
  (cond ((equal? exp "") exp)
          ((equal? (string-ref exp 0) '#\@)
           (a-ins (substring exp 1)))
          (else exp)))

(define (a-ins exp)
  (cond ((number? (string->number exp)) (change-binary (string->number exp)))
        ((equal? exp "SP") (change-binary 0))
        ((equal? exp "LCL") (change-binary 1))
        ((equal? exp "ARG") (change-binary 2))
        ((equal? exp "THIS") (change-binary 3))
        ((equal? exp "THAT") (change-binary 4))
        ((equal? exp "TEMP") (change-binary 5))
        ((equal? exp "STATIC") (change-binary 16))
        (else (check exp symbol-table))))



(define (check exp symbol-table)
  (cond ((and (equal? (string-ref exp 0) #\R)
       (number? (string->number (substring exp 1))))
         (change-binary (string->number (substring exp 1))))
        ((member? (string->symbol exp) symbol-table)
         (call (string->symbol exp) symbol-table))
        (else (add-list (string->symbol exp)))))

(define (call exp symbol-table)
  (cond ((equal? (caar symbol-table) exp)
      (change-binary (cadar symbol-table)))
      (else (call exp (cdr symbol-table)))))


(define (member? x lst)
  (if (empty? lst)
    #f
    (if (equal? x (car lst))
      #t
      (begin
        (if (list? (car lst))
          (let ((r (member? x (car lst))))
               (if r
                 r
                 (member? x (cdr lst))))
          (member? x (cdr lst)))))))

(define number 16)

(define (add-list exp)
  (set! list1 (list exp number))
  (set! symbol-table (cons list1 symbol-table))
  (set! list1 ())
  (set! number (+ 1 number))
  (change-binary (- number 1)))

(define (change-binary x)
  (cond ((< (string-length (number->string x 2)) 16)
         (string-append
          (make-string (- 16 (string-length (number->string x 2))) #\0)
                          (number->string x 2)))
        ((= (string-length (number->string x 2)) 16)
         (number->string x 2))
        (else 'very-large-number)))




(require 2htdp/batch-io)

(write-file "deneme.hack" (foldr string-append "" (map (lambda (x) (string-append (assembler x) "\n")) (read-lines "/home/deniz/deneme.asm"))))





(require 2htdp/batch-io)


(define (stripchars1 text chars)
  (list->string (remove* (string->list chars) (string->list text))))


(write-file "deneme1.hack" (foldr string-append "" (map (lambda (x) (string-append (stripchars1 x "                         ") "\n")) (read-lines "/home/deniz/deneme.hack"))))



        
        
(define (c-ins x)
  (cond ((equal? x "") x)
        ((number? (string->number x)) x)
        ((equal? (substring x 1 2) "=")
         (dest-format x))
        ((equal? (substring x 2 3) "=")
         (dest-format2 x))
        ((equal? (substring x 3 4) "=")
         (dest-format3 x))
        ((equal? (substring x 1 2) ";")
         (jump-format x))
        (else error 'invalid-input->this-is-not-an-assembly-language)))


(define dest "000")
(define comp "0000000")
(define jump "001")


(define (dest-format x)
  (cond ((equal? (string-ref x 0) #\M)
         (set! dest "001")
         (look-comp x))
        ((equal? (string-ref x 0) #\D)
         (set! dest "010")
          (look-comp x))
        ((equal? (substring x 0 2) "MD")
         (set! dest "011")
          (look-comp x))
         ((equal? (substring x 0 1) "A")
         (set! dest "100")
          (look-comp x))
          ((equal? (substring x 0 2) "AM")
         (set! dest "101")
          (look-comp x))
           ((equal? (substring x 0 2) "AD")
         (set! dest "110")
          (look-comp x))
           ((equal? (substring x 0 3) "AMD")
         (set! dest "111")
          (look-comp x))
           (else error 'invalid-symbol-for-destination-format)))

(define (dest-format2 x)
  (cond ((equal? (substring x 0 2) "MD")
         (set! dest "011")
          (look-comp x))
        ((equal? (substring x 0 2) "AM")
         (set! dest "101")
          (look-comp x))
           ((equal? (substring x 0 2) "AD")
         (set! dest "110")
          (look-comp x))
           (else error 'invalid-symbol-for-destination-format)))

(define (dest-format3 x)
  (cond ((equal? (substring x 0 3) "AMD")
         (set! dest "111")
          (look-comp x))
           (else error 'invalid-symbol-for-destination-format)))
           
 (define (jump-format x)
  (cond ((equal? (substring x 2 (string-length x)) "JGT")
         (set! jump "001")
         (look-comp-j x))
        ((equal? (substring x 2 (string-length x)) "JEQ")
         (set! jump "010")
          (look-comp-j x))
       ((equal? (substring x 2 (string-length x)) "JGE")
         (set! jump "011")
          (look-comp-j x))
         ((equal? (substring x 2 (string-length x)) "JLT")
         (set! jump "100")
          (look-comp-j x))
          ((equal? (substring x 2 (string-length x)) "JNE")
         (set! jump "101")
          (look-comp-j x))
           ((equal? (substring x 2 (string-length x)) "JLE")
         (set! jump "110")
          (look-comp-j x))
           ((equal? (substring x 2 (string-length x)) "JMP")
         (set! jump "111")
          (look-comp-j x))
           (else error 'invalid-symbol-for-jump-format)))
                 
        

(define (look-comp x)
  (cond ((equal? (substring x 2 (string-length x)) "M")
         (set! comp "1110000"))
        ((equal? (substring x 2 (string-length x)) "!M")
         (set! comp "1110001"))
        ((equal? (substring x 2 (string-length x)) "-M")
         (set! comp "1110011"))
        ((equal? (substring x 2 (string-length x)) "M+1")
         (set! comp "1110111"))
        ((equal? (substring x 2 (string-length x)) "M-1")
         (set! comp "1110010"))
        ((equal? (substring x 2 (string-length x)) "D+M")
         (set! comp "1000010"))
        ((equal? (substring x 2 (string-length x)) "D-M")
         (set! comp "1010011"))
        ((equal? (substring x 2 (string-length x)) "M-D")
         (set! comp "1000111"))
        ((equal? (substring x 2 (string-length x)) "D&M")
         (set! comp "1000000"))
        ((equal? (substring x 2 (string-length x)) "D|M")
         (set! comp "1010101"))
        ((equal? (substring x 2 (string-length x)) "0")
         (set! comp "0101010"))
        ((equal? (substring x 2 (string-length x)) "1")
         (set! comp "0111111"))
        ((equal? (substring x 2 (string-length x)) "-1")
         (set! comp "0111010"))
        ((equal? (substring x 2 (string-length x)) "D")
         (set! comp "0001100"))
        ((equal? (substring x 2 (string-length x)) "A")
         (set! comp "0110000"))
        ((equal? (substring x 2 (string-length x)) "!D")
         (set! comp "0001101"))
        ((equal? (substring x 2 (string-length x)) "!A")
         (set! comp "0110001"))
        ((equal? (substring x 2 (string-length x)) "-D")
         (set! comp "0001111"))
        ((equal? (substring x 2 (string-length x)) "-A")
         (set! comp "0110011"))
        ((equal? (substring x 2 (string-length x)) "D+1")
         (set! comp "0011111"))
        ((equal? (substring x 2 (string-length x)) "A+1")
         (set! comp "0110111"))
        ((equal? (substring x 2 (string-length x)) "D-1")
         (set! comp "0001110"))
        ((equal? (substring x 2 (string-length x)) "A-1")
         (set! comp "0110010"))
        ((equal? (substring x 2 (string-length x)) "D+A")
         (set! comp "0000010"))
        ((equal? (substring x 2 (string-length x)) "D-A")
         (set! comp "0010011"))
        ((equal? (substring x 2 (string-length x)) "A-D")
         (set! comp "0000111"))
        ((equal? (substring x 2 (string-length x)) "D&A")
         (set! comp "0000000"))
        ((equal? (substring x 2 (string-length x)) "D|A")
         (set! comp "0010101"))
        ((equal? (substring x 3 (string-length x)) "M")
         (set! comp "1110000"))
        ((equal? (substring x 3 (string-length x)) "!M")
         (set! comp "1110001"))
        ((equal? (substring x 3 (string-length x)) "-M")
         (set! comp "1110011"))
        ((equal? (substring x 3 (string-length x)) "M+1")
         (set! comp "1110111"))
        ((equal? (substring x 3 (string-length x)) "M-1")
         (set! comp "1110010"))
        ((equal? (substring x 3 (string-length x)) "D+M")
         (set! comp "1000010"))
        ((equal? (substring x 3 (string-length x)) "D-M")
         (set! comp "1010011"))
        ((equal? (substring x 3 (string-length x)) "M-D")
         (set! comp "1000111"))
        ((equal? (substring x 3 (string-length x)) "D&M")
         (set! comp "1000000"))
        ((equal? (substring x 3 (string-length x)) "D|M")
         (set! comp "1010101"))
        ((equal? (substring x 3 (string-length x)) "0")
         (set! comp "0101010"))
        ((equal? (substring x 3 (string-length x)) "1")
         (set! comp "0111111"))
        ((equal? (substring x 3 (string-length x)) "-1")
         (set! comp "0111010"))
        ((equal? (substring x 3 (string-length x)) "D")
         (set! comp "0001100"))
        ((equal? (substring x 3 (string-length x)) "A")
         (set! comp "0110000"))
        ((equal? (substring x 3 (string-length x)) "!D")
         (set! comp "0001101"))
        ((equal? (substring x 3 (string-length x)) "!A")
         (set! comp "0110001"))
        ((equal? (substring x 3 (string-length x)) "-D")
         (set! comp "0001111"))
        ((equal? (substring x 3 (string-length x)) "-A")
         (set! comp "0110011"))
        ((equal? (substring x 3 (string-length x)) "D+1")
         (set! comp "0011111"))
        ((equal? (substring x 3 (string-length x)) "A+1")
         (set! comp "0110111"))
        ((equal? (substring x 3 (string-length x)) "D-1")
         (set! comp "0001110"))
        ((equal? (substring x 3 (string-length x)) "A-1")
         (set! comp "0110010"))
        ((equal? (substring x 3 (string-length x)) "D+A")
         (set! comp "0000010"))
        ((equal? (substring x 3 (string-length x)) "D-A")
         (set! comp "0010011"))
        ((equal? (substring x 3 (string-length x)) "A-D")
         (set! comp "0000111"))
        ((equal? (substring x 3 (string-length x)) "D&A")
         (set! comp "0000000"))
        ((equal? (substring x 3 (string-length x)) "D|A")
         (set! comp "0010101"))
        ((equal? (substring x 4 (string-length x)) "M")
         (set! comp "1110000"))
        ((equal? (substring x 4 (string-length x)) "!M")
         (set! comp "1110001"))
        ((equal? (substring x 4 (string-length x)) "-M")
         (set! comp "1110011"))
        ((equal? (substring x 4 (string-length x)) "M+1")
         (set! comp "1110111"))
        ((equal? (substring x 4 (string-length x)) "M-1")
         (set! comp "1110010"))
        ((equal? (substring x 4 (string-length x)) "D+M")
         (set! comp "1000010"))
        ((equal? (substring x 4 (string-length x)) "D-M")
         (set! comp "1010011"))
        ((equal? (substring x 4 (string-length x)) "M-D")
         (set! comp "1000111"))
        ((equal? (substring x 4 (string-length x)) "D&M")
         (set! comp "1000000"))
        ((equal? (substring x 4 (string-length x)) "D|M")
         (set! comp "1010101"))
        ((equal? (substring x 4 (string-length x)) "0")
         (set! comp "0101010"))
        ((equal? (substring x 4 (string-length x)) "1")
         (set! comp "0111111"))
        ((equal? (substring x 4 (string-length x)) "-1")
         (set! comp "0111010"))
        ((equal? (substring x 4 (string-length x)) "D")
         (set! comp "0001100"))
        ((equal? (substring x 4 (string-length x)) "A")
         (set! comp "0110000"))
        ((equal? (substring x 4 (string-length x)) "!D")
         (set! comp "0001101"))
        ((equal? (substring x 4 (string-length x)) "!A")
         (set! comp "0110001"))
        ((equal? (substring x 4 (string-length x)) "-D")
         (set! comp "0001111"))
        ((equal? (substring x 4 (string-length x)) "-A")
         (set! comp "0110011"))
        ((equal? (substring x 4 (string-length x)) "D+1")
         (set! comp "0011111"))
        ((equal? (substring x 4 (string-length x)) "A+1")
         (set! comp "0110111"))
        ((equal? (substring x 4 (string-length x)) "D-1")
         (set! comp "0001110"))
        ((equal? (substring x 4 (string-length x)) "A-1")
         (set! comp "0110010"))
        ((equal? (substring x 4 (string-length x)) "D+A")
         (set! comp "0000010"))
        ((equal? (substring x 4 (string-length x)) "D-A")
         (set! comp "0010011"))
        ((equal? (substring x 4 (string-length x)) "A-D")
         (set! comp "0000111"))
        ((equal? (substring x 4 (string-length x)) "D&A")
         (set! comp "0000000"))
        ((equal? (substring x 4 (string-length x)) "D|A")
         (set! comp "0010101")))
  (string-append "111" comp dest "000"))
  
  


(define (look-comp-j x)
  (cond ((equal? (string-ref x 0) "M")
         (set! comp "1110000"))
        ((equal? (substring x 0 2) "!M")
         (set! comp "1110001"))
        ((equal? (substring x 0 2) "-M")
         (set! comp "1110011"))
        ((equal? (substring x 0 3) "M+1")
         (set! comp "1110111"))
        ((equal? (substring x 0 3) "M-1")
         (set! comp "1110010"))
        ((equal? (substring x 0 3) "D+M")
         (set! comp "1000010"))
        ((equal? (substring x 0 3) "D-M")
         (set! comp "1010011"))
        ((equal? (substring x 0 3) "M-D")
         (set! comp "1000111"))
        ((equal? (substring x 0 3) "D&M")
         (set! comp "1000000"))
        ((equal? (substring x 0 3) "D|M")
         (set! comp "1010101"))
        ((equal? (substring x 0 1) "0")
         (set! comp "0101010"))
        ((equal? (substring x 0 1) "1")
         (set! comp "0111111"))
        ((equal? (substring x 0 2) "-1")
         (set! comp "0111010"))
        ((equal? (substring x 0 1) "D")
         (set! comp "0001100"))
        ((equal? (substring x 0 1) "A")
         (set! comp "0110000"))
        ((equal? (substring x 0 2) "!D")
         (set! comp "0001101"))
        ((equal? (substring x 0 2) "!A")
         (set! comp "0110001"))
        ((equal? (substring x 0 2) "-D")
         (set! comp "0001111"))
        ((equal? (substring x 0 2) "-A")
         (set! comp "0110011"))
        ((equal? (substring x 0 3) "D+1")
         (set! comp "0011111"))
        ((equal? (substring x 0 3) "A+1")
         (set! comp "0110111"))
        ((equal? (substring x 0 3) "D-1")
         (set! comp "0001110"))
        ((equal? (substring x 0 3) "A-1")
         (set! comp "0110010"))
        ((equal? (substring x 0 3) "D+A")
         (set! comp "0000010"))
        ((equal? (substring x 0 3) "D-A")
         (set! comp "0010011"))
        ((equal? (substring x 0 3) "A-D")
         (set! comp "0000111"))
        ((equal? (substring x 0 3) "D&A")
         (set! comp "0000000"))
        ((equal? (substring x 0 3) "D|A")
         (set! comp "0010101")))
  (string-append "111" comp "000" jump))



(require 2htdp/batch-io)

(write-file "sonuc.hack" (foldr string-append "" (map (lambda (x) (string-append (c-ins x) "\n")) (read-lines "/home/deniz/deneme1.hack"))))

(require 2htdp/batch-io)

(define list2 "")


(define (func x)
  (if (not (equal? x "")) (cond ((equal? list2 "") (set! list2 (string-append x "")))
                                (else (set! list2 (string-append list2 "\n" x)))) list2))

(map (lambda (x) (func x)) (read-lines "/home/deniz/sonuc.hack"))

(write-file "sonuc2.hack" list2)
