(require 2htdp/batch-io)


(define (stripchars1 text chars)
  (list->string (remove* (string->list chars) (string->list text))))


(write-file "deneme1.hack" (foldr string-append "" (map (lambda (x) (string-append (stripchars1 x "              ") "\n")) (read-lines "/home/deniz/deneme.hack"))))



        
        
(define (c-ins x)
  (cond ((equal? x "") x)
        ((number? (string->number x)) x)
        ((equal? (substring x 1 2) "=")
         (dest-format x))
        ((equal? (substring x 1 2) ";")
         (jump-format x))
        (else error 'invalid-input->this-is-not-an-assembly-language)))


(define dest "000")
(define comp "0000000")
(define jump "001")


(define (dest-format x)
  (cond ((equal? (string-ref x 0) #\M)
         (set! dest "001")
         (look-comp x))
        ((equal? (string-ref x 0) #\D)
         (set! dest "010")
          (look-comp x))
        ((equal? (substring x 0 2) "MD")
         (set! dest "011")
          (look-comp x))
         ((equal? (substring x 0 1) "A")
         (set! dest "100")
          (look-comp x))
          ((equal? (substring x 0 2) "AM")
         (set! dest "101")
          (look-comp x))
           ((equal? (substring x 0 2) "AD")
         (set! dest "110")
          (look-comp x))
           ((equal? (substring x 0 3) "AMD")
         (set! dest "111")
          (look-comp x))
           (else error 'invalid-symbol-for-destination-format)))
           
 (define (jump-format x)
  (cond ((equal? (substring x 2 (string-length x)) "JGT")
         (set! jump "001")
         (look-comp-j x))
        ((equal? (substring x 2 (string-length x)) "JEQ")
         (set! jump "010")
          (look-comp-j x))
       ((equal? (substring x 2 (string-length x)) "JGE")
         (set! jump "011")
          (look-comp-j x))
         ((equal? (substring x 2 (string-length x)) "JLT")
         (set! jump "100")
          (look-comp-j x))
          ((equal? (substring x 2 (string-length x)) "JNE")
         (set! jump "101")
          (look-comp-j x))
           ((equal? (substring x 2 (string-length x)) "JLE")
         (set! jump "110")
          (look-comp-j x))
           ((equal? (substring x 2 (string-length x)) "JMP")
         (set! jump "111")
          (look-comp-j x))
           (else error 'invalid-symbol-for-jump-format)))
                 
        

(define (look-comp x)
  (cond ((equal? (substring x 2 (string-length x)) "M")
         (set! comp "1110000"))
        ((equal? (substring x 2 (string-length x)) "!M")
         (set! comp "1110001"))
        ((equal? (substring x 2 (string-length x)) "-M")
         (set! comp "1110011"))
        ((equal? (substring x 2 (string-length x)) "M+1")
         (set! comp "1110111"))
        ((equal? (substring x 2 (string-length x)) "M-1")
         (set! comp "1110010"))
        ((equal? (substring x 2 (string-length x)) "D+M")
         (set! comp "1000010"))
        ((equal? (substring x 2 (string-length x)) "D-M")
         (set! comp "1010011"))
        ((equal? (substring x 2 (string-length x)) "M-D")
         (set! comp "1000111"))
        ((equal? (substring x 2 (string-length x)) "D&M")
         (set! comp "1000000"))
        ((equal? (substring x 2 (string-length x)) "D|M")
         (set! comp "1010101"))
        ((equal? (substring x 2 (string-length x)) "0")
         (set! comp "0101010"))
        ((equal? (substring x 2 (string-length x)) "1")
         (set! comp "0111111"))
        ((equal? (substring x 2 (string-length x)) "-1")
         (set! comp "0111010"))
        ((equal? (substring x 2 (string-length x)) "D")
         (set! comp "0001100"))
        ((equal? (substring x 2 (string-length x)) "A")
         (set! comp "0110000"))
        ((equal? (substring x 2 (string-length x)) "!D")
         (set! comp "0001101"))
        ((equal? (substring x 2 (string-length x)) "!A")
         (set! comp "0110001"))
        ((equal? (substring x 2 (string-length x)) "-D")
         (set! comp "0001111"))
        ((equal? (substring x 2 (string-length x)) "-A")
         (set! comp "0110011"))
        ((equal? (substring x 2 (string-length x)) "D+1")
         (set! comp "0011111"))
        ((equal? (substring x 2 (string-length x)) "A+1")
         (set! comp "0110111"))
        ((equal? (substring x 2 (string-length x)) "D-1")
         (set! comp "0001110"))
        ((equal? (substring x 2 (string-length x)) "A-1")
         (set! comp "0110010"))
        ((equal? (substring x 2 (string-length x)) "D+A")
         (set! comp "0000010"))
        ((equal? (substring x 2 (string-length x)) "D-A")
         (set! comp "0010011"))
        ((equal? (substring x 2 (string-length x)) "A-D")
         (set! comp "0000111"))
        ((equal? (substring x 2 (string-length x)) "D&A")
         (set! comp "0000000"))
        ((equal? (substring x 2 (string-length x)) "D|A")
         (set! comp "0010101")))
  (string-append "111" comp dest "000"))
  
  


(define (look-comp-j x)
  (cond ((equal? (string-ref x 0) "M")
         (set! comp "1110000"))
        ((equal? (substring x 0 2) "!M")
         (set! comp "1110001"))
        ((equal? (substring x 0 2) "-M")
         (set! comp "1110011"))
        ((equal? (substring x 0 3) "M+1")
         (set! comp "1110111"))
        ((equal? (substring x 0 3) "M-1")
         (set! comp "1110010"))
        ((equal? (substring x 0 3) "D+M")
         (set! comp "1000010"))
        ((equal? (substring x 0 3) "D-M")
         (set! comp "1010011"))
        ((equal? (substring x 0 3) "M-D")
         (set! comp "1000111"))
        ((equal? (substring x 0 3) "D&M")
         (set! comp "1000000"))
        ((equal? (substring x 0 3) "D|M")
         (set! comp "1010101"))
        ((equal? (substring x 0 1) "0")
         (set! comp "0101010"))
        ((equal? (substring x 0 1) "1")
         (set! comp "0111111"))
        ((equal? (substring x 0 2) "-1")
         (set! comp "0111010"))
        ((equal? (substring x 0 1) "D")
         (set! comp "0001100"))
        ((equal? (substring x 0 1) "A")
         (set! comp "0110000"))
        ((equal? (substring x 0 2) "!D")
         (set! comp "0001101"))
        ((equal? (substring x 0 2) "!A")
         (set! comp "0110001"))
        ((equal? (substring x 0 2) "-D")
         (set! comp "0001111"))
        ((equal? (substring x 0 2) "-A")
         (set! comp "0110011"))
        ((equal? (substring x 0 3) "D+1")
         (set! comp "0011111"))
        ((equal? (substring x 0 3) "A+1")
         (set! comp "0110111"))
        ((equal? (substring x 0 3) "D-1")
         (set! comp "0001110"))
        ((equal? (substring x 0 3) "A-1")
         (set! comp "0110010"))
        ((equal? (substring x 0 3) "D+A")
         (set! comp "0000010"))
        ((equal? (substring x 0 3) "D-A")
         (set! comp "0010011"))
        ((equal? (substring x 0 3) "A-D")
         (set! comp "0000111"))
        ((equal? (substring x 0 3) "D&A")
         (set! comp "0000000"))
        ((equal? (substring x 0 3) "D|A")
         (set! comp "0010101")))
  (string-append "111" comp "000" jump))



(require 2htdp/batch-io)

(write-file "sonuc.hack" (foldr string-append "" (map (lambda (x) (string-append (c-ins x) "\n")) (read-lines "/home/deniz/deneme1.hack"))))

(require 2htdp/batch-io)

(define list2 "")


(define (func x)
  (if (not (equal? x "")) (cond ((equal? list2 "") (set! list2 (string-append x "")))
                                (else (set! list2 (string-append list2 "\n" x)))) list2))

(map (lambda (x) (func x)) (read-lines "/home/deniz/sonuc.hack"))

(write-file "sonuc2.hack" list2)
